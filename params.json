{"name":"Minimalistic SCORM-based exam template for e-learning","tagline":"","body":"This repository contains template files in order to prepare SCORM 1.2 LMS exam for e-learning purposes. All content-based files are written HTML.\r\n\r\nWhole zipped repository can be instantly imported as a SCORM package in Moodle and OLAT.\r\n\r\n## Features and libraries\r\n\r\n * Look & feel: [Bootstrap](http://getbootstrap.com),\r\n * Math notation: [MathJax](https://www.mathjax.org),\r\n * Code syntax highlighting: [SyntaxHighlighter](http://alexgorbatchev.com/SyntaxHighlighter),\r\n * Toast messages to check connection with LMS: [jQuery toaster](https://github.com/scottoffen/jquery.toaster),\r\n * Text decoder: [Web Toolkit](http://www.webtoolkit.info/),\r\n * Exam: single and multiple choice.\r\n\r\nThe exam is designed for one-time form send (all UI is blocked and connection with LMS is closed).\r\n\r\nAll submitted answers (also with correct answers) can be displayed in Moodle/OLAT per user.\r\n\r\n## Preview\r\n\r\n * [Exam](materials/exam.html).\r\n\r\nNote that in the preview you do not have connection to LMS system, so an error will be displayed by toaster plugin.\r\n\r\n### Example result\r\n\r\n| element | value |\r\n|---|---|\r\n| cmi.comments | Wed Jan 20 2016 17:53:32 GMT+0100 |\r\n| cmi.core.lesson_status | passed |\r\n| cmi.core.score.max | 32 |\r\n| cmi.core.score.min | 0 |\r\n| cmi.core.score.raw | 30 |\r\n| cmi.core.total_time | 3 min 40 sec |\r\n| ... | ... |\r\n| cmi.interactions_4.correct_responses_0.pattern | c |\r\n| cmi.interactions_4.id | 1 |\r\n| cmi.interactions_4.result | correct |\r\n| cmi.interactions_4.student_response | c |\r\n| cmi.interactions_4.type | choice |\r\n| ... | ... |\r\n \r\n## Brief how-to\r\n\r\n * `imsmanifest.xml` - defines tree of modules (practically nothing to change here).\r\n * `materials/exam.html` - header and footer have CSS and JS code to proper load the libraries; main part of body has quiz questions; the beginning of body has list of correct answers.\r\n\r\nAnswers can be either in plain or obfuscated form. You may see in browsers debugger how the obfuscation is done - check `StringED.encode()` and `StringED.decode()` functions in `materials/js/webtoolkit.js`.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}